# Test List: 
.pos 0
   irmovq array,%r11     # Memory location 0x700
   irmovq $3,%r12        # 3
   rmmovq %r12,(%r11)
   irmovq $5,%r12        # 5
   rmmovq %r12,8(%r11)
   irmovq $8,%r12        # 8
   rmmovq %r12,16(%r11)
   irmovq $0,%r12        # Ending Zero
   rmmovq %r12,24(%r11)

main:
    irmovq pino, %rbp
    irmovq pino, %rsp

    # BIT ARRAY: Used sifting, containing bit values from 1 << 32 --> 1 << 31 .... to 100 -> 10 -> 1 -> 0 Bit
    irmovq bit,%rdx                # Memory location 0x1500
    
    # MEMORY VALUE ARRAY
    irmovq memoryValues,%rsi       # Memory location 0x1400
          
    # (%rsi) = memory value for current bit pointer             
    # 8(%rsi) = memory value for res >> 1
    # 16(%rsi) = memory value + 16   
    # 24(%rsi) = memeory value + 8 
    # 32(%rsi) =  MULTIPLICATION RESULT  
    # 40(%rsi) = SQRT RESULT     
    # 48(%rsi) =  2^ Potency starting value     
    # 56(%rsi) = Current X           
    # 64(%rsi) = Multiplication status         
    # 72(%rsi) = Sqrt status     
    # 80(%rsi) = X * X * 5 + 4 OR (X * X * 5 + 4) - 8 = X * X * 5 - 4  
    # 88(%rsi) = first s*s == x result, 1 = True, 0 = False  
    # 96(%rsi) = second s*s == x result, 1 = True, 0 = False
    
    # RESERVED VARIABLES:
    #       %r11 <--- Fibonacci list
    #       %rdx <--- Bit array
    #       %rsi <--- Memory variables

    # NOTE:
    #
    #  With current setup 46 368 is biggest Fibonacci number, what code can detect. Because Sqrt 
    #  can’t handle more bigger Fibonacci X * X * 5 ± 4 numbers. This problem can be solved by adding   
    #  bigger bits into Bit array, but course criterion was < 1000 Fibonacci numbers, so adding more 
    #  Bit’s into array would only add more commands to loop. 
    #  IF YOU ADD MORE, YOU HAVE TO ADD EVEN AMMOUNT, OTHERWISE SQRT WILL GIVE WRONG ANSWER, BECAUSE BIT SIFT >> 2 USE WRONG VALUES!!
    #
    #  If you add more bits into array, you would hate to update these values:
    #
    #	For right starting value:
    #   	irmovq $4294967296,%rax            # Bit: equals to 1 << 32
    #	    irmovq $4294967296,%r10            # 1 << 32 --> r10
    #
    #	Add + 1 to potency sum for each added bits
    #	.quad 0x20                                         # 2^ Potency starting value 
    #
    #   Program can't also detect Fibonacci number 0, because listLoop will stop, when it get zero as current X.


    # Free variables and their initializations:
    irmovq $0,%rax
    irmovq $0,%rcx
    irmovq $0,%rbx
    irmovq $0,%rdi
    irmovq $0,%r8
    irmovq $0,%r9
    irmovq $0,%r10
    irmovq $0,%r12
    irmovq $0,%r13
    irmovq $0,%r14

    call listLoop
    halt

# MAIN LOOP
listLoop:
    mrmovq (%r11),%rax               # Current X
    irmovq $0,%r14 
    subq %rax,%r14                   # Checking if list end
    jne fibonacciStart                    
    ret

fibonacciStart:
    rmmovq %rax,56(%rsi)             # Adding current X to memory
    rrmovq %rax,%r12                 # Adding current X to r12 = Multiplicand
    rrmovq %rax,%rcx                 # Adding current X to rcx = Multiplier
    irmovq $0,%rax
    irmovq $5376,%rdx                # Bit array starting point
    mrmovq 48(%rsi),%r13             # 2^ Potency starting value --> r13
    irmovq $1, %r10                  # Auxiliary variable --> - 1
    irmovq $0,%r14
    rmmovq %r14,64(%rsi)             # Multiplication status
    jmp multiplication

# X * X DONE
fibonacciXXdone:
    mrmovq 32(%rsi),%r14             # r14 = X * X
    # (X * X) * 5
    irmovq $0,%r13
    addq %r14,%r13                   # r13 = X * X
    addq %r14,%r14                   # r14 = 2 * (X * X)
    addq %r14,%r14                   # r14 = 2 * ( 2 * (X * X) ) == 4 * ( X * X )
    addq %r14,%r13                   
    rrmovq %r13,%r14                 # r14 = 2 * ( 2 * (X * X) ) + (X * X) = 5 * ( X * X)
    # r14 = X * X * 5
    irmovq $4,%r13
    addq %r13,%r14
    # r14 = X * X * 5 + 4
    rmmovq %r14,80(%rsi)
    jmp firstCheck

# X * X * 5 + 4 

firstCheck:
    # r14 = X * X * 5 + 4
    mrmovq 80(%rsi), %r12             # SQRT(r12)
    irmovq $0,%r14
    rmmovq %r14,72(%rsi)              # SQRT status

    # SQRT auxiliary variable initializations 

    irmovq $5376,%rdx                 # Bit array starting position pointer
    irmovq $4294967296,%rax           # Bit: equals to 1 << 32
    irmovq $0,%rcx                    # Res
    #Hox NUM = %r12
    mrmovq 16(%rsi), %r8              # Auxiliary variable --> + 16
    jmp biggerThanNum

# Sqrt(X * X * 5 + 4) DONE

fisrtSqrtDone:
    mrmovq 40(%rsi), %rax            # Adding SQRT result to --> rax
    rrmovq %rax,%r12                 # Adding current X to r12 = Multiplicand
    rrmovq %rax,%rcx                 # Adding current X to rcx = Multiplier
    irmovq $0,%rax
    irmovq $5376,%rdx                # Bit array starting point
    mrmovq 48(%rsi),%r13             # 2^ Potency starting value --> r13
    irmovq $1,%r14
    irmovq $1, %r10                  # Auxiliary variable --> - 1
    rmmovq %r14,64(%rsi)             # Multiplication status
    jmp multiplication

# S = Sqrt(X * X * 5 + 4) --> S*S DONE

firstSSdone:
    mrmovq 80(%rsi), %rax            # Adding X * X * 5 + 4  to --> rax
    mrmovq 32(%rsi), %r14            # Adding MULTIPLICATION RESULT to --> r14
    irmovq $1,%r13
    irmovq $0,%r10
    subq %rax,%r14
    cmove %r13,%r10                  # if S * S = X * X * 5 + 4, result = 1
    rmmovq %r10,88(%rsi)             # Adding True or False result to memory
    jmp secondCheck
    halt

# (X * X * 5 + 4) - 8 == X * X * 5 - 4

secondCheck:
    mrmovq 80(%rsi), %r14             # from memory --> %r14 =  X * X * 5 + 4
    irmovq $8,%r8                     # 8 --> r8
    subq %r8,%r14                     # r14 = |X * X * 5 + 4 - 8 == X * X * 5 - 4|
    rmmovq %r14,80(%rsi)
    rrmovq %r14,%r12                  # SQRT(r12)
    irmovq $1,%r14
    rmmovq %r14,72(%rsi)              # SQRT status

    # SQRT auxiliary variable initializations 

    irmovq $5376,%rdx                 # Bit array starting position pointer
    irmovq $4294967296,%rax           # Bit: equals to 1 << 32
    irmovq $0,%rcx                    # Res
    #Hox NUM = %r12
    mrmovq 16(%rsi), %r8              # Auxiliary variable --> + 16
    jmp biggerThanNum

# Sqrt(X * X * 5 - 4) DONE

secondSqrtDone:
    mrmovq 40(%rsi), %rax             # Adding SQRT result to --> rax
    rrmovq %rax,%r12                  # Adding current X to r12 = Multiplicand
    rrmovq %rax,%rcx                  # Adding current X to rcx = Multiplier
    irmovq $0,%rax
    irmovq $5376,%rdx                 # Bit array starting point
    mrmovq 48(%rsi),%r13              # 2^ Potency starting value --> r13
    irmovq $1, %r10                   # Auxiliary variable --> - 1
    irmovq $2,%r14
    rmmovq %r14,64(%rsi)              # Multiplication status
    jmp multiplication

#  S = Sqrt(X * X * 5 - 4) --> S*S DONE

secondSSdone:
    mrmovq 80(%rsi), %rax             # Adding X * X * 5 - 4  to --> rax
    mrmovq 32(%rsi), %r14             # Adding MULTIPLICATION RESULT to --> rax
    rrmovq %r14,%r8
    irmovq $1,%r13
    irmovq $0,%r10
    subq %rax,%r14
    cmove %r13,%r10                   # if S * S = X * X * 5 + 4, result = 1
    rmmovq %r10,96(%rsi)              # Adding True or False result to memory
    jmp fibonacciVerify

#  Checking if X is FIBONACCI number

fibonacciVerify:
    mrmovq 88(%rsi), %rax             # Adding first s*s == x result to --> rax
    mrmovq 96(%rsi), %r14             # Adding second s*s == x result to --> rax
    addq %rax,%r14                    # r14 =  0 + 1 OR 1 + 1 OR 0 + 0
    irmovq $1,%r10
    irmovq $0,%r13
    mrmovq 24(%rsi), %r8              # Auxiliary variable --> + 8
    addq %r8,%r11                     # Array pointer + 8
    mrmovq 56(%rsi), %rax             # Current X to rax
    subq %r10,%r14                    # Compare isPerfectSquare(5*x*x + 4) || isPerfectSquare(5*x*x - 4)
    cmovge %r13,%rax                  # if  ^ true --> rax = 0
    jge listLoop                      # if  ^ ^ true listLoop continues
    halt                              # else Halt and Returning current X in rax

# MULTIPLICATION:
#       Multiplication algorithm makes use of information about bit relations for example if 
#       Multiplier number X - bit ( 100000) is greater than 0, it means Num have to 2^5 bit = 1. 
#       Algorithm start loop from bit array 0 position = 1 << 32 and go next 1 << 31 … etc to the 1 << 0 Bit
#       IF Multiplier - current Bit is greater than 0. Multiplier - that Bit and algorithm go Sum stage
#       Sum stage: we using bit's potency information to calculate sub Sum
#       For example: 45 * 2^5 = (45 + 45 = 90) --> (90 + 90 = 180) --> (180 + 180 = 360) 
#       --> (360 + 360 = 720) --> (720 + 720 = 1440) == 45 (101101) << 5
#       Finally those sub Sum's are added together and that's Multiplication result

multiplication:
    irmovq $0, %r14                   # Auxiliary variable
    mrmovq (%rdx),%rbx                # Bit array current value --> rbx
    subq %rbx,%r14                    # Checking if bit array value is = 0
    jne multiplicationLoop
    rmmovq %rax,32(%rsi)              # Adding multiplication result to memory
    irmovq $1, %r14                   # Auxiliary variable
    mrmovq 64(%rsi),%rbx              # Multiplication status
    subq %r14,%rbx
    jl fibonacciXXdone                # Multiplication status = 0, so X*X DONE
    je firstSSdone                    # Multiplication status = 1, so first S*S DONE
    jg secondSSdone                   # Multiplication status = 2, so second S*S DONE

multiplicationLoop:
    rrmovq %rcx,%r9                   # Multiplier --> r9
    subq %rbx,%r9                     # r9 - bit array value, if bigger then that point bit must be 1
    cmovge %r9,%rcx                   # rcx = r9
    cmovge %r12,%r14                  # r14 = Multiplicand
    cmovge %r13,%r9                   # r9 = 2^ Potency Multiplier
    jge potencyCheck
    subq %r10,%r13
    mrmovq 24(%rsi),%rbx              # Bit array pointer + 8
    addq %rbx,%rdx
    jmp multiplication

potencyCheck:
    rrmovq %r13,%r8
    irmovq $0, %r9                    # Auxiliary variable
    subq %r13,%r9                     # 0 - 2^ Potency Multiplier
    jl multiplicationSum              # if > 0
    addq %r12,%rax                    # Adding to sum
    mrmovq 24(%rsi),%rbx              # Bit array pointer + 8
    addq %rbx,%rdx
    jmp multiplication

multiplicationSum:
    addq %r14,%r14
    subq %r10,%r8                     # Loop multiplier value - 1
    jg multiplicationSum              # Loop multiplier value != 1
    addq %r14,%rax
    subq %r10,%r13
    mrmovq 24(%rsi),%rbx              # Bit array pointer + 8
    addq %rbx,%rdx
    jmp multiplication

# SQRT 
#       Sgrt algorithm also makes use of information about bit relations for example if 
#       Sgrt algorithm Bit >> 2, it just check, which bit is 2 values smaller than curren Bit
#       For Res >> 1, it use sameway Num - current > 0 information and if its true
#       Bit value which is 1 smaller in Bit list will be added into Sub sum 
#       Finally those sub Sum's are added together and that's Res >> 1 result

biggerThanNum:
    rrmovq %rax,%r10                   # Bit --> r10
    subq %r12,%r10                     # if bit > num
    jg siftTwo
    irmovq $4294967296,%r10            # 1 << 32 --> r10
    subq %rax,%r10
    jne bitSifted                      # if bit sift have happened
    rmmovq %rdx,(%rsi)                 # Saving Bit (rax) location (Pointer) in bit array to memory
    jmp biggerThanZero

bitSifted:
    subq %r8,%rdx                      # rdx pointing current bit + 16, so subq 16 for that
    rmmovq %rdx,(%rsi)                 # Saving Bit (rax) location (Pointer) in bit array to memory
    jmp biggerThanZero

# WHILE BIT > NUM, bit >> 2
siftTwo:
    mrmovq (%rdx),%rax                 # rax = current value in Bit array
    addq %r8,%rdx                      # adding + 16 for bit array pointer = current Bit >> 2 while its bigger than Num             
    jmp biggerThanNum

# WHILE bit > 0
biggerThanZero:
    irmovq $0,%r13                      # Sum = 0
    subq %rax,%r13                      # 0 - Bit
    jne sqrtLoop                        # bit != 0
    rmmovq %rcx,40(%rsi)
    irmovq $0, %r14                     # Auxiliary variable
    mrmovq 72(%rsi),%rbx                # SQRT status
    subq %rbx,%r14
    je fisrtSqrtDone                    # Multiplication status = 0, so sqrt(X*X*5+4) DONE
    jl secondSqrtDone                   # Multiplication status = 1, so sqrt(X*X*5-4) DONE

sqrtLoop:
    # bit sift >> 1
    irmovq $0,%r13                      # Sum = 0
    rrmovq %rcx, %r14                   # Auxiliary variable
    mrmovq 24(%rsi), %r8                # Auxiliary variable --> + 8
    irmovq $5376,%rdx                   # Bit array starting point
    jmp siftLoop

# FOR RES >> 1 sift
siftLoop:
    irmovq $0,%rdi                      # Auxiliary variable
    mrmovq (%rdx),%rbx                  # Bit array current value --> rbx
    mrmovq 8(%rdx),%r10                 # Bit array pointer + 8
    irmovq $0,%r9                       # Auxiliary variable
    subq %r14,%r9                       # if Res (r14) = 0, no need to continue sift loop
    jne siftOne
    jmp compare

# IF NUM >= RES >> 1 + BIT --> res = RES >> 1 + BIT or Else res = RES >> 1
compare:
    # Sift >> 1 for Res done
    irmovq $0,%r14
    rmmovq %r13,8(%rsi)                # Adding sift sum = res >> 1 to memory
    irmovq $0, %rdi                    # Reseting Auxiliary variable
    addq %rax,%r13                     # res >> 1 + bit
    rrmovq %r12,%r14                   # num -- > r14
    rrmovq %rax,%r9                    # Bit (rax) --> r9
    addq %rcx,%r9                      # r9 = bit + res
    mrmovq 8(%rsi),%r10                # r10 = res >> 1 
    subq %r9,%r14                      # num  - (bit + res)

    #if (num >= res + bit)
    cmovge %r14,%r12                   # num = num - (res + bit)
    cmovge %r13,%r10                   # r10 = res + bit
    rrmovq %r10,%rcx                   # res = (res >> 1 + bit) or res >> 1
    jmp siftBit

siftBit:
    mrmovq 16(%rsi), %r8               # Auxiliary variable --> + 8
    mrmovq (%rsi),%rdx                 # Current bit pointer value --> rdx      
    addq %r8,%rdx                      # Adding + 16 to pointer value
    mrmovq (%rdx),%rax                 # Change bit (rax) to bit >> 2 value
    rrmovq %rdx,%r14                
    rmmovq %r14,(%rsi)                 # Updated pointer value to memory
    jmp biggerThanZero

# RES >> 1 sift
siftOne:
    rrmovq %r14,%r9                    # res --> r9
    subq %rbx,%r9                      # r9 - bit array current value

    # if res > bit array current value
    cmovge %r9,%r14                    # Temp res (r14) = r9 - bit array current value                   
    cmovge %r10,%rdi                   # Auxiliary variable = bit array current value pointer + 8, equals >> 1 sift 
    addq %r8,%rdx                      # + 8 to bit array pointer
    addq %rdi,%r13                     # Adding bit array current value pointer + 8 or 0 to sum
    jmp siftLoop


.pos 0x700
array:

# BIT ARRAY

.pos 0x1500
.align 8
bit:
.quad 0x100000000                     # Bit:  1 >> 32
.quad 0x80000000                      # Bit : 10000000000000000000000000000000   = 1 >> 31
.quad 0x40000000                      # Bit : 1000000000000000000000000000000    = 1 >> 30
.quad 0x20000000                      # Bit : 100000000000000000000000000000     = 1 >> 29
.quad 0x10000000                      # Bit : 10000000000000000000000000000      = 1 >> 28
.quad 0x8000000                       # Bit : 1000000000000000000000000000       = 1 >> 27
.quad 0x4000000                       # Bit : 100000000000000000000000000        = 1 >> 26
.quad 0x2000000                       # Bit : 10000000000000000000000000         = 1 >> 25
.quad 0x1000000                       # Bit : 1000000000000000000000000          = 1 >> 24
.quad 0x800000                        # Bit : 100000000000000000000000           = 1 >> 23
.quad 0x400000                        # Bit : 10000000000000000000000            = 1 >> 22
.quad 0x200000                        # Bit : 1000000000000000000000             = 1 >> 21
.quad 0x100000                        # Bit : 100000000000000000000              = 1 >> 20
.quad 0x80000                         # Bit : 10000000000000000000               = 1 >> 19
.quad 0x40000                         # Bit : 1000000000000000000                = 1 >> 18
.quad 0x20000                         # Bit : 100000000000000000                 = 1 >> 17
.quad 0x10000                         # Bit : 10000000000000000                  = 1 >> 16
.quad 0x8000                          # Bit : 1000000000000000                   = 1 >> 15
.quad 0x4000                          # Bit : 100000000000000                    = 1 >> 14
.quad 0x2000                          # Bit : 10000000000000                     = 1 >> 13
.quad 0x1000                          # Bit : 1000000000000                      = 1 >> 12
.quad 0x800                           # Bit : 100000000000                       = 1 >> 11
.quad 0x400                           # Bit : 10000000000                        = 1 >> 10
.quad 0x200                           # Bit : 1000000000                         = 1 >> 9
.quad 0x100                           # Bit : 100000000                          = 1 >> 8
.quad 0x80                            # Bit : 10000000                           = 1 >> 7
.quad 0x40                            # Bit : 1000000                            = 1 >> 6
.quad 0x20                            # Bit : 100000                             = 1 >> 5
.quad 0x10                            # Bit : 10000                              = 1 >> 4
.quad 0x8                             # Bit : 1000                               = 1 >> 3
.quad 0x4                             # Bit : 100                                = 1 >> 2
.quad 0x2                             # Bit : 10                                 = 1 >> 1
.quad 0x1                             # Bit : 1                                  = 1 >> 0
.quad 0x0                             # extra 0 for bit sift, because if bit = 1 program read bit 1 pointer + 16 values
.quad 0x0                             # END 0
 
# MEMORY VALUE ARRAY

.pos 0x1400
.align 8
memoryValues:
.quad 0x0                             # memory value for current bit pointer
.quad 0x0                             # memeory value for res >> 1 
.quad 0x10                            # memeory value + 16
.quad 0x8                             # memeory value + 8
.quad 0x0                             # MULTIPLICATION RESULT 
.quad 0x0                             # SQRT RESULT 
.quad 0x20                            # 2^ Potency starting value 
.quad 0x0                             # Current X
.quad 0x0                             # Multiplication status 
.quad 0x0                             # Sqrt status 
.quad 0x0                             # X * X * 5 + 4 OR (X * X * 5 + 4) - 8 = X * X * 5 - 4 
.quad 0x0                             # first s*s == x result, 1 = True, 0 = False 
.quad 0x0                             # second s*s == x result, 1 = True, 0 = False 

.pos 0x1900
pino:
